{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"via_point_gen","provenance":[],"collapsed_sections":[],"authorship_tag":"ABX9TyOP5L0k2rUNrsqEIZpdT2zh"},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"code","metadata":{"id":"lf2lSd1DXJPG"},"source":["import numpy as np \n","import matplotlib.pyplot as plt"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":130},"id":"rTcqGCJQXW2L","executionInfo":{"status":"error","timestamp":1607368864567,"user_tz":480,"elapsed":1087,"user":{"displayName":"Trevor Voth","photoUrl":"","userId":"03518366456894061528"}},"outputId":"1fd9c718-b710-4c43-b337-7e8425a0ecb1"},"source":["def point2line_dis(A,B,C,point):\n","  distance = np.abs(A*point[0]+B*point[1]+C)/np.sqrt(A**2+B**2)\n","  return distance\n","\n","def angle_vectors(vec1, vec2):\n","  unit_vector_1 = vector_1 / np.linalg.norm(vector_1)\n","  unit_vector_2 = vector_2 / np.linalg.norm(vector_2)\n","  dot_product = np.dot(unit_vector_1, unit_vector_2)\n","  angle = np.arccos(dot_product)\n","  return angle*180/np.pi\n","\n","def viapoints(robot_pos,obstacle_pos,target):\n","  #robot_pos is the position of the robot [x,y,theta]\n","  #obstacle_pos is the position of i obstacles ix3 np.array\n","  #target is the position of the target [x,y,theta]\n","  robot_r= 10 \n","  obs_r= 10\n","  Rz = [[np.cos(robot_pos[2]), -np.sin(robot_pos[2]), 0 ], [np.sin(robot_pos[2]), np.cos(robot_pos[2]), 0], [ 0, 0, 1]]\n","  coefficients_target = np.polyfit(robot_pos, target, 1) #calc coeffients for the line between the robot and target \n","  At,Bt,Ct = 1,coeffecients[0], coefficients[1] \n","  robot_target_vec = target - robot_pos\n","  bi = []\n","  ai = []\n","  thetao=[]\n","  r_frame_obs =[]\n","  # r_frame_target =  Rz@obstacle_pos[i]-robot_pos #convert target position to robot frame\n","  b_group = []\n","  g_group = []\n","  rest_group = []\n","  \n","  for i in range(obstacle_pos.shape[0]):\n","    # b = point2line_dis(At,Bt,Ct,obstacle_pos[i])\n","    robot_frame_obs_pos =  obstacle_pos[i]-robot_pos\n","    b, a, theta = robot_frame_obs_pos\n","\n","    if 0 < robot_frame_obs_pos1] < abs(np.sqrt(robot_target_vec[0]**2+robot_target_vec[1]**2)) and abs(robot_frame_obs_pos[0])<(robot_r+obs_r):\n","      b_group.append(obstacle)\n","    bi.append(b)\n","    ai.append(a)\n","    r_frame_obs.append(robot_frame_obs_pos)\n","    thetai.append(theta)\n","\n","  first_obst = obstacle_pos[np.argmin(ai)]\n","  \n","  for obstacle in r_frame_obs:\n","    if 0 < obstacle[1] < abs(np.sqrt(robot_target_vec[0]**2+robot_target_vec[1]**2)) and abs(obstacle[0])<(robot_r+obs_r):\n","      bg_group.append(obstacle)\n","    elif \n","\n","\n","  min_bi = np.amin(np.abs(bi))\n","\n","  print 'a =', coefficients[0]\n","  print 'b =', coefficients[1]\n","\n","  # Let's compute the values of the line...\n","  polynomial = np.poly1d(coefficients)\n","  x_axis = np.linspace(0,500,100)\n","  y_axis = polynomial(x_axis)\n","\n","\n","\n","# m, b = point2line([(1,5),(3,4)])\n","\n","\n","# print(m)\n","# print(b)\n","# plt.figure()\n","# s = [1,3]\n","# t = [5,4]\n","# plt.scatter(s,t)\n","# x = np.linspace(0,10,100)\n","# y = m*x+b\n","# plt.plot(x,y)\n"],"execution_count":null,"outputs":[{"output_type":"error","ename":"SyntaxError","evalue":"ignored","traceback":["\u001b[0;36m  File \u001b[0;32m\"<ipython-input-4-31c1b5cc370b>\"\u001b[0;36m, line \u001b[0;32m28\u001b[0m\n\u001b[0;31m    for i in range(obstacle_pos.shape[0])):\u001b[0m\n\u001b[0m                                         ^\u001b[0m\n\u001b[0;31mSyntaxError\u001b[0m\u001b[0;31m:\u001b[0m invalid syntax\n"]}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"mV5F2hYheNlK","executionInfo":{"status":"ok","timestamp":1607320231769,"user_tz":480,"elapsed":861,"user":{"displayName":"Trevor Voth","photoUrl":"","userId":"03518366456894061528"}},"outputId":"82534453-97a3-451b-9b63-92e272940d8a"},"source":["x = np.array([[1,2],[3,4],[3,4]])\n","print(x[0])"],"execution_count":null,"outputs":[{"output_type":"stream","text":["[1 2]\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"vXN4YEaitfjR"},"source":["#test \n","\n"],"execution_count":null,"outputs":[]}]}