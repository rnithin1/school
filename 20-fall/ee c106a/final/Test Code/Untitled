{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Untitled","provenance":[],"collapsed_sections":[]},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"code","metadata":{"id":"OQnJwhWcIPAw"},"source":["\"\"\"\n","Mobile robot motion planning sample with Dynamic Window Approach\n","author: Atsushi Sakai (@Atsushi_twi), Göktuğ Karakaşlı\n","\"\"\"\n","\n","import math\n","from enum import Enum\n","\n","import matplotlib.pyplot as plt\n","import numpy as np\n","\n","show_animation = True\n","\n","\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"cyaHyv6wIP01"},"source":["def dwa_control(x, config, goal, ob):\n","    \"\"\"\n","    Dynamic Window Approach control\n","    \"\"\"\n","    dw = calc_dynamic_window(x, config)\n","\n","    u, trajectory = calc_control_and_trajectory(x, dw, config, goal, ob)\n","\n","    return u, trajectory\n","\n","\n","class RobotType(Enum):\n","    circle = 0\n","    rectangle = 1\n","\n","\n","class Config:\n","    \"\"\"\n","    simulation parameter class\n","    \"\"\"\n","\n","    def __init__(self):\n","        # robot parameter\n","        self.max_speed = 1.0  # [m/s]\n","        self.min_speed = -0.5  # [m/s]\n","        self.max_yaw_rate = 40.0 * math.pi / 180.0  # [rad/s]\n","        self.max_accel = 0.2  # [m/ss]\n","        self.max_delta_yaw_rate = 40.0 * math.pi / 180.0  # [rad/ss]\n","        self.v_resolution = 0.01  # [m/s]\n","        self.yaw_rate_resolution = 0.1 * math.pi / 180.0  # [rad/s]\n","        self.dt = 0.1  # [s] Time tick for motion prediction\n","        self.predict_time = 3.0  # [s]\n","        self.to_goal_cost_gain = 0.15\n","        self.speed_cost_gain = 1.0\n","        self.obstacle_cost_gain = 1.0\n","        self.robot_stuck_flag_cons = 0.001  # constant to prevent robot stucked\n","        self.robot_type = RobotType.circle\n","\n","        # if robot_type == RobotType.circle\n","        # Also used to check if goal is reached in both types\n","        self.robot_radius = 1.0  # [m] for collision check\n","\n","        # if robot_type == RobotType.rectangle\n","        self.robot_width = 0.5  # [m] for collision check\n","        self.robot_length = 1.2  # [m] for collision check\n","        # obstacles [x(m) y(m), ....]\n","        self.ob = np.array([[-1, -1],\n","                            [0, 2],\n","                            [4.0, 2.0],\n","                            [5.0, 4.0],\n","                            [5.0, 5.0],\n","                            [5.0, 6.0],\n","                            [5.0, 9.0],\n","                            [8.0, 9.0],\n","                            [7.0, 9.0],\n","                            [8.0, 10.0],\n","                            [9.0, 11.0],\n","                            [12.0, 13.0],\n","                            [12.0, 12.0],\n","                            [15.0, 15.0],\n","                            [13.0, 13.0]\n","                            ])\n","\n","    @property\n","    def robot_type(self):\n","        return self._robot_type\n","\n","    @robot_type.setter\n","    def robot_type(self, value):\n","        if not isinstance(value, RobotType):\n","            raise TypeError(\"robot_type must be an instance of RobotType\")\n","        self._robot_type = value\n","\n","\n","config = Config()\n","\n","\n","def motion(x, u, dt):\n","    \"\"\"\n","    motion model\n","    \"\"\"\n","\n","    x[2] += u[1] * dt\n","    x[0] += u[0] * math.cos(x[2]) * dt\n","    x[1] += u[0] * math.sin(x[2]) * dt\n","    x[3] = u[0]\n","    x[4] = u[1]\n","\n","    return x\n","\n","\n","def calc_dynamic_window(x, config):\n","    \"\"\"\n","    calculation dynamic window based on current state x\n","    \"\"\"\n","\n","    # Dynamic window from robot specification\n","    Vs = [config.min_speed, config.max_speed,\n","          -config.max_yaw_rate, config.max_yaw_rate]\n","\n","    # Dynamic window from motion model\n","    Vd = [x[3] - config.max_accel * config.dt,\n","          x[3] + config.max_accel * config.dt,\n","          x[4] - config.max_delta_yaw_rate * config.dt,\n","          x[4] + config.max_delta_yaw_rate * config.dt]\n","\n","    #  [v_min, v_max, yaw_rate_min, yaw_rate_max]\n","    dw = [max(Vs[0], Vd[0]), min(Vs[1], Vd[1]),\n","          max(Vs[2], Vd[2]), min(Vs[3], Vd[3])]\n","\n","    return dw\n","\n","\n","def predict_trajectory(x_init, v, y, config):\n","    \"\"\"\n","    predict trajectory with an input\n","    \"\"\"\n","\n","    x = np.array(x_init)\n","    trajectory = np.array(x)\n","    time = 0\n","    while time <= config.predict_time:\n","        x = motion(x, [v, y], config.dt)\n","        trajectory = np.vstack((trajectory, x))\n","        time += config.dt\n","\n","    return trajectory\n","\n","\n","def calc_control_and_trajectory(x, dw, config, goal, ob):\n","    \"\"\"\n","    calculation final input with dynamic window\n","    \"\"\"\n","\n","    x_init = x[:]\n","    min_cost = float(\"inf\")\n","    best_u = [0.0, 0.0]\n","    best_trajectory = np.array([x])\n","\n","    # evaluate all trajectory with sampled input in dynamic window\n","    for v in np.arange(dw[0], dw[1], config.v_resolution):\n","        for y in np.arange(dw[2], dw[3], config.yaw_rate_resolution):\n","\n","            trajectory = predict_trajectory(x_init, v, y, config)\n","            # calc cost\n","            to_goal_cost = config.to_goal_cost_gain * calc_to_goal_cost(trajectory, goal)\n","            speed_cost = config.speed_cost_gain * (config.max_speed - trajectory[-1, 3])\n","            ob_cost = config.obstacle_cost_gain * calc_obstacle_cost(trajectory, ob, config)\n","\n","            final_cost = to_goal_cost + speed_cost + ob_cost\n","\n","            # search minimum trajectory\n","            if min_cost >= final_cost:\n","                min_cost = final_cost\n","                best_u = [v, y]\n","                best_trajectory = trajectory\n","                if abs(best_u[0]) < config.robot_stuck_flag_cons \\\n","                        and abs(x[3]) < config.robot_stuck_flag_cons:\n","                    # to ensure the robot do not get stuck in\n","                    # best v=0 m/s (in front of an obstacle) and\n","                    # best omega=0 rad/s (heading to the goal with\n","                    # angle difference of 0)\n","                    best_u[1] = -config.max_delta_yaw_rate\n","    return best_u, best_trajectory\n","\n","\n","def calc_obstacle_cost(trajectory, ob, config):\n","    \"\"\"\n","    calc obstacle cost inf: collision\n","    \"\"\"\n","    ox = ob[:, 0]\n","    oy = ob[:, 1]\n","    dx = trajectory[:, 0] - ox[:, None]\n","    dy = trajectory[:, 1] - oy[:, None]\n","    r = np.hypot(dx, dy)\n","\n","    if config.robot_type == RobotType.rectangle:\n","        yaw = trajectory[:, 2]\n","        rot = np.array([[np.cos(yaw), -np.sin(yaw)], [np.sin(yaw), np.cos(yaw)]])\n","        rot = np.transpose(rot, [2, 0, 1])\n","        local_ob = ob[:, None] - trajectory[:, 0:2]\n","        local_ob = local_ob.reshape(-1, local_ob.shape[-1])\n","        local_ob = np.array([local_ob @ x for x in rot])\n","        local_ob = local_ob.reshape(-1, local_ob.shape[-1])\n","        upper_check = local_ob[:, 0] <= config.robot_length / 2\n","        right_check = local_ob[:, 1] <= config.robot_width / 2\n","        bottom_check = local_ob[:, 0] >= -config.robot_length / 2\n","        left_check = local_ob[:, 1] >= -config.robot_width / 2\n","        if (np.logical_and(np.logical_and(upper_check, right_check),\n","                           np.logical_and(bottom_check, left_check))).any():\n","            return float(\"Inf\")\n","    elif config.robot_type == RobotType.circle:\n","        if np.array(r <= config.robot_radius).any():\n","            return float(\"Inf\")\n","\n","    min_r = np.min(r)\n","    return 1.0 / min_r  # OK\n","\n","\n","def calc_to_goal_cost(trajectory, goal):\n","    \"\"\"\n","        calc to goal cost with angle difference\n","    \"\"\"\n","\n","    dx = goal[0] - trajectory[-1, 0]\n","    dy = goal[1] - trajectory[-1, 1]\n","    error_angle = math.atan2(dy, dx)\n","    cost_angle = error_angle - trajectory[-1, 2]\n","    cost = abs(math.atan2(math.sin(cost_angle), math.cos(cost_angle)))\n","\n","    return cost\n","\n","\n","def plot_arrow(x, y, yaw, length=0.5, width=0.1):  # pragma: no cover\n","    plt.arrow(x, y, length * math.cos(yaw), length * math.sin(yaw),\n","              head_length=width, head_width=width)\n","    plt.plot(x, y)\n","\n","\n","def plot_robot(x, y, yaw, config):  # pragma: no cover\n","    if config.robot_type == RobotType.rectangle:\n","        outline = np.array([[-config.robot_length / 2, config.robot_length / 2,\n","                             (config.robot_length / 2), -config.robot_length / 2,\n","                             -config.robot_length / 2],\n","                            [config.robot_width / 2, config.robot_width / 2,\n","                             - config.robot_width / 2, -config.robot_width / 2,\n","                             config.robot_width / 2]])\n","        Rot1 = np.array([[math.cos(yaw), math.sin(yaw)],\n","                         [-math.sin(yaw), math.cos(yaw)]])\n","        outline = (outline.T.dot(Rot1)).T\n","        outline[0, :] += x\n","        outline[1, :] += y\n","        plt.plot(np.array(outline[0, :]).flatten(),\n","                 np.array(outline[1, :]).flatten(), \"-k\")\n","    elif config.robot_type == RobotType.circle:\n","        circle = plt.Circle((x, y), config.robot_radius, color=\"b\")\n","        plt.gcf().gca().add_artist(circle)\n","        out_x, out_y = (np.array([x, y]) +\n","                        np.array([np.cos(yaw), np.sin(yaw)]) * config.robot_radius)\n","        plt.plot([x, out_x], [y, out_y], \"-k\")\n","\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"9Lb3ihr6JmKK"},"source":["trajectory = []\n","def main(gx=10.0, gy=10.0, robot_type=RobotType.circle):\n","    global trajectory\n","    # initial state [x(m), y(m), yaw(rad), v(m/s), omega(rad/s)]\n","    x = np.array([0.0, 0.0, math.pi / 8.0, 0.0, 0.0])\n","    # goal position [x(m), y(m)]\n","    goal = np.array([gx, gy])\n","\n","    # input [forward speed, yaw_rate]\n","\n","    config.robot_type = robot_type\n","    trajectory = np.array(x)\n","    ob = config.ob\n","    for _ in range(1):\n","        u, predicted_trajectory = dwa_control(x, config, goal, ob)\n","        x = motion(x, u, config.dt)  # simulate robot\n","        trajectory = np.vstack((trajectory, x))  # store state history\n","\n","        if show_animation:\n","            plt.cla()\n","            # for stopping simulation with the esc key.\n","            plt.gcf().canvas.mpl_connect(\n","                'key_release_event',\n","                lambda event: [exit(0) if event.key == 'escape' else None])\n","            plt.plot(predicted_trajectory[:, 0], predicted_trajectory[:, 1], \"-g\")\n","            plt.plot(x[0], x[1], \"xr\")\n","            plt.plot(goal[0], goal[1], \"xb\")\n","            plt.plot(ob[:, 0], ob[:, 1], \"ok\")\n","            plot_robot(x[0], x[1], x[2], config)\n","            plot_arrow(x[0], x[1], x[2])\n","            plt.axis(\"equal\")\n","            plt.grid(True)\n","            plt.pause(0.0001)\n","\n","        # check reaching goal\n","        dist_to_goal = math.hypot(x[0] - goal[0], x[1] - goal[1])\n","        if dist_to_goal <= config.robot_radius:\n","            print(\"Goal!!\")\n","            break\n","\n","    print(\"Done\")\n","    if show_animation:\n","        plt.plot(trajectory[:, 0], trajectory[:, 1], \"-r\")\n","        plt.pause(0.0001)\n","\n","    plt.show()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":530},"id":"Yg-vgvGcIRde","executionInfo":{"status":"ok","timestamp":1607574156779,"user_tz":480,"elapsed":1237,"user":{"displayName":"Trevor Voth","photoUrl":"","userId":"03518366456894061528"}},"outputId":"d1573f1e-5083-40a4-f1ba-a8aef3ce9e86"},"source":["main(robot_type=RobotType.rectangle)"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}},{"output_type":"stream","text":["Done\n"],"name":"stdout"},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":282},"id":"rz0LRCe1JhVv","executionInfo":{"status":"ok","timestamp":1607574161494,"user_tz":480,"elapsed":840,"user":{"displayName":"Trevor Voth","photoUrl":"","userId":"03518366456894061528"}},"outputId":"be56a1a3-39ea-4d81-a517-f443a16b7713"},"source":["plt.plot(trajectory[:, 0], trajectory[:, 1], \"-r\")"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[<matplotlib.lines.Line2D at 0x7f0908713518>]"]},"metadata":{"tags":[]},"execution_count":12},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"rXWiUv27IWKd","executionInfo":{"status":"ok","timestamp":1607511860115,"user_tz":300,"elapsed":336,"user":{"displayName":"Nithin Raghavan","photoUrl":"","userId":"14620564873443438286"}},"outputId":"4bc0965d-e08e-40ef-f6c7-8a2e7335a410"},"source":["trajectory.shape"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(2, 5)"]},"metadata":{"tags":[]},"execution_count":42}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"NaBtgHEWKeQi","executionInfo":{"status":"ok","timestamp":1607511861908,"user_tz":300,"elapsed":307,"user":{"displayName":"Nithin Raghavan","photoUrl":"","userId":"14620564873443438286"}},"outputId":"eafa6b19-e455-4c22-d848-2669f64cbc11"},"source":["np.array(tuple((trajectory[:, 0], trajectory[:, 1])))"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[0.        , 0.00184251],\n","       [0.        , 0.00077793]])"]},"metadata":{"tags":[]},"execution_count":43}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"HahbyMRWKltI","executionInfo":{"status":"ok","timestamp":1607511862901,"user_tz":300,"elapsed":316,"user":{"displayName":"Nithin Raghavan","photoUrl":"","userId":"14620564873443438286"}},"outputId":"c0afb970-746c-42e5-e891-999bad45ea12"},"source":["trajectory[:, 1]"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([0.        , 0.00077793])"]},"metadata":{"tags":[]},"execution_count":44}]},{"cell_type":"code","metadata":{"id":"cfQJrPRhK55l"},"source":[""],"execution_count":null,"outputs":[]}]}